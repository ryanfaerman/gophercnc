// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package tutorial

import (
	"context"
	"database/sql"
)

const activeToolLibrary = `-- name: ActiveToolLibrary :one
SELECT resources.name, resources.path FROM configs 
JOIN resources ON configs.data = resources.name 
WHERE configs.uri = "library.active"
`

type ActiveToolLibraryRow struct {
	Name string
	Path sql.NullString
}

func (q *Queries) ActiveToolLibrary(ctx context.Context) (ActiveToolLibraryRow, error) {
	row := q.db.QueryRowContext(ctx, activeToolLibrary)
	var i ActiveToolLibraryRow
	err := row.Scan(&i.Name, &i.Path)
	return i, err
}

const addToolLibrary = `-- name: AddToolLibrary :one
INSERT INTO resources (name, path, kind)
VALUES(?1, ?2, "tool.library")
RETURNING name, path, format, kind
`

type AddToolLibraryParams struct {
	Name string
	Path sql.NullString
}

func (q *Queries) AddToolLibrary(ctx context.Context, arg AddToolLibraryParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, addToolLibrary, arg.Name, arg.Path)
	var i Resource
	err := row.Scan(
		&i.Name,
		&i.Path,
		&i.Format,
		&i.Kind,
	)
	return i, err
}

const setActiveLibrary = `-- name: SetActiveLibrary :exec
INSERT INTO configs (uri, data) 
VALUES("library.active", ?1)
ON CONFLICT(uri) DO UPDATE 
SET data = ?1
`

func (q *Queries) SetActiveLibrary(ctx context.Context, data sql.NullString) error {
	_, err := q.db.ExecContext(ctx, setActiveLibrary, data)
	return err
}
