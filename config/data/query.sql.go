// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: query.sql

package data

import (
	"context"
	"database/sql"
)

const activeResource = `-- name: ActiveResource :one
SELECT resources.name, resources.path FROM configs 
JOIN resources ON configs.data = resources.name 
WHERE configs.uri = ? AND resources.kind = ?
`

type ActiveResourceParams struct {
	Uri  string
	Kind sql.NullString
}

type ActiveResourceRow struct {
	Name string
	Path sql.NullString
}

func (q *Queries) ActiveResource(ctx context.Context, arg ActiveResourceParams) (ActiveResourceRow, error) {
	row := q.db.QueryRowContext(ctx, activeResource, arg.Uri, arg.Kind)
	var i ActiveResourceRow
	err := row.Scan(&i.Name, &i.Path)
	return i, err
}

const configs = `-- name: Configs :many
SELECT uri, data FROM configs
`

func (q *Queries) Configs(ctx context.Context) ([]Config, error) {
	rows, err := q.db.QueryContext(ctx, configs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Config
	for rows.Next() {
		var i Config
		if err := rows.Scan(&i.Uri, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createResource = `-- name: CreateResource :one
INSERT INTO resources (name, path, kind)
VALUES(?1, ?2, ?3)
RETURNING id, name, path, format, kind
`

type CreateResourceParams struct {
	Name string
	Path sql.NullString
	Kind sql.NullString
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, createResource, arg.Name, arg.Path, arg.Kind)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Format,
		&i.Kind,
	)
	return i, err
}

const findResource = `-- name: FindResource :many
SELECT id, name, path, format, kind FROM resources
`

func (q *Queries) FindResource(ctx context.Context) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, findResource)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Format,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findResourceByKind = `-- name: FindResourceByKind :many
SELECT id, name, path, format, kind FROM resources
WHERE kind = ?
`

func (q *Queries) FindResourceByKind(ctx context.Context, kind sql.NullString) ([]Resource, error) {
	rows, err := q.db.QueryContext(ctx, findResourceByKind, kind)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Path,
			&i.Format,
			&i.Kind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findResourceByNameByKind = `-- name: FindResourceByNameByKind :one
SELECT id, name, path, format, kind FROM resources
WHERE name = ? AND kind = ?
`

type FindResourceByNameByKindParams struct {
	Name string
	Kind sql.NullString
}

func (q *Queries) FindResourceByNameByKind(ctx context.Context, arg FindResourceByNameByKindParams) (Resource, error) {
	row := q.db.QueryRowContext(ctx, findResourceByNameByKind, arg.Name, arg.Kind)
	var i Resource
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Path,
		&i.Format,
		&i.Kind,
	)
	return i, err
}

const getConfig = `-- name: GetConfig :one
SELECT data FROM configs 
WHERE uri = ?
`

func (q *Queries) GetConfig(ctx context.Context, uri string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getConfig, uri)
	var data sql.NullString
	err := row.Scan(&data)
	return data, err
}

const removeResource = `-- name: RemoveResource :exec
DELETE FROM resources WHERE name=? AND kind = ?
`

type RemoveResourceParams struct {
	Name string
	Kind sql.NullString
}

func (q *Queries) RemoveResource(ctx context.Context, arg RemoveResourceParams) error {
	_, err := q.db.ExecContext(ctx, removeResource, arg.Name, arg.Kind)
	return err
}

const setConfig = `-- name: SetConfig :exec
INSERT INTO configs (uri, data)
VALUES (?1, ?2)
ON CONFLICT(uri) DO UPDATE
SET data = ?2
`

type SetConfigParams struct {
	Uri  string
	Data sql.NullString
}

func (q *Queries) SetConfig(ctx context.Context, arg SetConfigParams) error {
	_, err := q.db.ExecContext(ctx, setConfig, arg.Uri, arg.Data)
	return err
}

const unsetConfig = `-- name: UnsetConfig :exec
DELETE FROM configs WHERE uri=?
`

func (q *Queries) UnsetConfig(ctx context.Context, uri string) error {
	_, err := q.db.ExecContext(ctx, unsetConfig, uri)
	return err
}
